{"version":3,"sources":["js/components/FileInputForm.js","js/utils.js","js/components/FileSelectionScreen.js","js/components/Cell.js","js/components/Row.js","js/components/Table.js","js/components/FileDisplayScreen.js","js/components/Navigator.js","index.js"],"names":["FileInputForm","props","e","file","target","files","callback","fileReaderInst","FileReader","onerror","err","console","log","onloadend","ev","finalLines","lines","result","split","element","push","readAsText","fileReader","rows","navigator","className","htmlFor","type","accept","onChange","this","eventHandler","bind","id","React","Component","FileSelectionScreen","href","Cell","value","Row","values","map","index","key","Table","row","FileDisplayScreen","onClick","screenProps","Navigator","state","currentScreen","screenName","setState","ReactDOM","render","document","getElementById"],"mappings":"mQAMqBA,E,YAIjB,WAAYC,GAAQ,qEACVA,I,0EAIGC,GAAI,IAAD,OAIRC,EAAOD,EAAEE,OAAOC,MAAM,GACtBF,GChBK,SAACA,EAAMG,GACpB,IAAIC,EAAiB,IAAIC,WAGzBD,EAAeE,QAAW,SAACC,GACvBC,QAAQC,IAAIF,IAIhBH,EAAeM,UAAa,SAACC,GAEzB,IAAIC,EAAa,GAGbC,EAAQF,EAAGV,OAAOa,OAAOC,MAAM,MALL,uBAQ9B,YAAqBF,EAArB,+CAA2B,CAAC,IAAnBG,EAAkB,QACvBJ,EAAWK,KAAKD,EAAQD,MAAM,OATJ,kFAa9BZ,EAASS,IAIbR,EAAec,WAAWlB,GDTlBmB,CAAWnB,GAAM,SAACoB,GAAW,EAAKtB,MAAMuB,UAAU,mBAAoBD,Q,+BAK1E,OAAO,yBAAKE,UAAU,wBAClB,2BAAOC,QAAQ,aAAf,wBACA,2BAAOC,KAAK,OAAOF,UAAU,oBAAoBG,OAAO,OAAOC,SAAUC,KAAKC,aAAaC,KAAKF,MAAOG,GAAG,mB,GAtB3EC,IAAMC,WEFlC,SAASC,EAAoBnC,GAOxC,OAAO,yBAAKwB,UAAU,6DAClB,yBAAKA,UAAU,mCACX,wBAAIA,UAAU,gBACV,0BAAMA,UAAU,eAAe,KAC/B,0BAAMA,UAAU,gBAAhB,OACA,0BAAMA,UAAU,aAAhB,UACA,0BAAMA,UAAU,eAAe,MAC/B,yBAAKA,UAAU,kCAAf,OAAoD,uBAAGY,KAAK,sCAAR,kBAExD,wBAAIZ,UAAU,aACd,kBAAC,EAAD,CAAeD,UAAWvB,EAAMuB,cCjB7B,SAASc,EAAKrC,GAMzB,OAAO,wBAAIwB,UAAU,QAAQxB,EAAMsC,OCNxB,SAASC,EAAIvC,GAMxB,OAAO,4BACFA,EAAMwC,OAAOC,KAAI,SAACH,EAAOI,GAAR,OAAkB,kBAACL,EAAD,CAAMM,IAAKD,EAAOJ,MAAOA,QCPtD,SAASM,EAAM5C,GAK1B,OAAO,yBAAKwB,UAAU,oBAClB,2BAAOA,UAAU,yBACb,+BACKxB,EAAMsB,KAAKmB,KAAI,SAACI,EAAKH,GAAN,OAAgB,kBAACH,EAAD,CAAKI,IAAKD,EAAOF,OAAQK,UCR1D,SAASC,EAAkB9C,GAKtC,OAAO,6BACH,yBAAKwB,UAAU,kCAAf,wCAEQ,6BACJ,4BAAQA,UAAU,sCAAsCuB,QAAS,kBAAM/C,EAAMuB,UAAU,yBAAvF,sBAKJ,yBAAKC,UAAU,gBACX,kBAACoB,EAAD,CAAOtB,KAAMtB,EAAMgD,gB,ICfVC,E,YAKjB,WAAYjD,GAAQ,IAAD,8BACf,4CAAMA,KACDkD,MAAQ,CACTC,cAAe,sBACfH,YAAa,MAJF,E,uEAQTI,EAAYJ,GAClBnB,KAAKwB,SAAS,CAAEF,cAAeC,EAAYJ,kB,+BAI3C,MAAoC,wBAA7BnB,KAAKqB,MAAMC,cACd,kBAAChB,EAAD,CACIZ,UAAWM,KAAKN,UAAUQ,KAAKF,QAEnC,kBAACiB,EAAD,CACIvB,UAAWM,KAAKN,UAAUQ,KAAKF,MAC/BmB,YAAanB,KAAKqB,MAAMF,kB,GAxBDf,IAAMC,WCE7CoB,IAASC,OAAO,kBAAC,EAAD,MAAeC,SAASC,eAAe,U","file":"static/js/main.aa564298.chunk.js","sourcesContent":["/* eslint-disable no-useless-constructor */\r\n\r\n\r\nimport React from 'react'\r\nimport { fileReader } from '../utils'\r\n\r\nexport default class FileInputForm extends React.Component {\r\n    /** \r\n     * * The Component renders a File Input Field \r\n     */\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    // handels file input \r\n    eventHandler(e) {\r\n        /**\r\n         * * Gets File Object and passes to the fileReader funtion defined in utils.js  \r\n         */\r\n        let file = e.target.files[0]\r\n        if (file) {\r\n            fileReader(file, (rows) => { this.props.navigator(\"FileDiplayScreen\", rows) })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"form-group text-dark\">\r\n            <label htmlFor=\"fileInput\" >Please Select a file</label>\r\n            <input type=\"file\" className=\"form-control-file\" accept=\".csv\" onChange={this.eventHandler.bind(this)} id=\"fileInput\" />\r\n        </div>\r\n    }\r\n}","/**\r\n * The file containes helper functions  \r\n */\r\n\r\nvar fileReader = (file, callback) =>{\r\n    let fileReaderInst = new FileReader()\r\n    \r\n    // If an error occurs \r\n    fileReaderInst.onerror = ((err)=>{\r\n        console.log(err)\r\n    })\r\n\r\n    // When file is loaded \r\n    fileReaderInst.onloadend = ((ev)=>{\r\n\r\n        let finalLines = []\r\n\r\n        // gets lines \r\n        let lines = ev.target.result.split('\\n')\r\n        \r\n        // seprates each line into sperate elements \r\n        for (let element  of lines){\r\n            finalLines.push(element.split(\",\"))\r\n        }\r\n\r\n        // once the contents have been extracted calls the callback\r\n        callback(finalLines)\r\n    })\r\n\r\n    // Reads file \r\n    fileReaderInst.readAsText(file)\r\n}\r\n\r\n\r\nexport {\r\n    fileReader\r\n}","/* eslint-disable no-useless-constructor */\r\nimport React from 'react'\r\nimport FileInputForm from './FileInputForm'\r\n\r\nexport default function FileSelectionScreen(props) {\r\n    /**\r\n     * * The Component renders a screen which let's a user to select a file\r\n     * * It expects a navigator function as as prop \r\n     */\r\n\r\n\r\n    return <div className=\"row  text-white align-items-center justify-content-center\">\r\n        <div className=\"main-content card p-sm-3 p-md-4\">\r\n            <h1 className=\"text-center \">\r\n                <span className=\"text-danger\">{\"<\"}</span>\r\n                <span className=\"text-success\">CSV</span>\r\n                <span className=\"text-dark\">Reader</span>\r\n                <span className=\"text-danger\">{\"/>\"}</span>\r\n                <div className=\"h3 p-0 text-sm-right text-dark\"> by <a href=\"https://linkedin.com/atifmehmood53\">Atif Mehmood</a></div>\r\n            </h1>\r\n            <hr className=\"bg-white\" />\r\n            <FileInputForm navigator={props.navigator} />\r\n        </div>\r\n    </div>\r\n\r\n}","\r\n\r\nimport React from 'react'\r\n\r\nexport default function Cell(props) {\r\n    /**\r\n     * * The Component Renders a single cell of a table\r\n     * * Expects 'value:any type' as a props, which will be rendered in this cell   \r\n     */\r\n\r\n    return <th className=\"cell\">{props.value}</th>\r\n    \r\n}","\r\nimport React from 'react'\r\nimport Cell from './Cell'\r\n\r\nexport default function Row(props) {\r\n    /**\r\n     * * The Component renders a row of the table displaying contents of a file \r\n     * * It expects 'values:list' as a prop which represents contents of each cell in this row \r\n     */\r\n\r\n    return <tr>\r\n        {props.values.map((value, index) => <Cell key={index} value={value} />)}\r\n    </tr>\r\n\r\n}","\r\nimport React from 'react'\r\nimport Row from './Row'\r\n\r\nexport default function Table(props) {\r\n    /** \r\n     * * The component renders a table representing CSV file's components \r\n    */\r\n\r\n    return <div className=\"table-responsive\">\r\n        <table className=\"table table-bordered \">\r\n            <tbody>\r\n                {props.rows.map((row, index) => <Row key={index} values={row} />)}\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n\r\n}","\r\nimport React from 'react'\r\nimport Table from './Table'\r\n\r\nexport default function FileDisplayScreen(props) {\r\n    /**\r\n     * * The Componnet represents a screen which will be rendered after file has been read \r\n     * * It expects a navigator function as a prop and rows of which will be rendered in the child table \r\n     */\r\n    return <div>\r\n        <div className=\"display-4 px-4 py-5 text-white\">\r\n            Contents of the file are shown bellow\r\n                <hr />\r\n            <button className=\"btn btn-lg py-3 btn-white my-4 py-2\" onClick={() => props.navigator('FileSelectionScreen')}>\r\n                Select a New File\r\n            </button>\r\n        </div>\r\n\r\n        <div className=\"bg-white m-0\">\r\n            <Table rows={props.screenProps} />\r\n        </div>\r\n\r\n    </div>\r\n\r\n}","import React from 'react'\r\nimport FileSelectionScreen from './FileSelectionScreen'\r\nimport FileDisplayScreen from './FileDisplayScreen'\r\n\r\nexport default class Navigator extends React.Component {\r\n    /**\r\n     * * The Component serves as Switch Navigator\r\n     */\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentScreen: 'FileSelectionScreen',\r\n            screenProps: null // this will be set by child screen components to interchange data between them \r\n        }\r\n    }\r\n\r\n    navigator(screenName, screenProps) {\r\n        this.setState({ currentScreen: screenName, screenProps })\r\n    }\r\n\r\n    render() {\r\n        return this.state.currentScreen === 'FileSelectionScreen' ?\r\n            <FileSelectionScreen\r\n                navigator={this.navigator.bind(this)}\r\n            /> :\r\n            <FileDisplayScreen\r\n                navigator={this.navigator.bind(this)}\r\n                screenProps={this.state.screenProps}\r\n            />\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/bootstrap.min.css'\nimport './css/styles.css'\nimport Navigator from './js/components/Navigator'\n\nReactDOM.render(<Navigator />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}